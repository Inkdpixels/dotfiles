#!/bin/bash

install_deps() {
	# Check for the CLT
	if ! type_exists 'gcc'; then
		e_error "The XCode Command Line Tools must be installed first."
		echo "  https://developer.apple.com/downloads"
		exit 1
	else
		e_success "The XCode Command Line Tools are installed."
	fi


	# Check for Homebrew
	if ! type_exists 'brew'; then
		e_header "Installing Homebrew..."
		ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
		brew doctor
		if ! type_exists 'brew'; then
			e_success "Homebrew is installed."
		else
			e_error "Something went wrong."
			exit 1
		fi
	else
		e_success "Homebrew is installed."
	fi

	# Make sure weâ€™re using the latest Homebrew
	e_header "Updating Homebrew..."
	brew update

	# Upgrade any already-installed brew-formula
	e_header "Upgrading any installed Homebrew formulas..."
	brew upgrade

	# Install Brew Cask to install native osx apps from the terminal
	e_header "Installing Homebrew Cask..."
	brew tap phinze/homebrew-cask
	brew install brew-cask

	# Remove outdated brew-formulas
	e_header "Removing any outdated Homebrew formulas..."
	brew cleanup

	# Check for git
	if ! type_exists 'git'; then
		e_header "Installing Git..."
		brew install git
		if ! type_exists 'git'; then
			e_success "Git is installed."
		else
			e_error "Something went wrong."
			exit 1
		fi
	else
		e_success "git is installed."
	fi

	# Check for SSH
	if ! type_exists 'ssh'; then
		e_header "Installing OpenSSH..."
		brew tap homebrew/dupes
		brew install openssh
		if ! type_exists 'ssh'; then
			e_success "OpenSSH is installed."
		else
			e_error "Something went wrong."
			exit 1
		fi
	else
		e_success "OpenSSH is installed."
	fi

	# Check for Node
	if ! type_exists 'node'; then
		e_header "Installing Node..."
		brew install node

		e_header "Installing NPM..."
		curl https://npmjs.org/install.sh | sh
	else
		e_success "Node is installed."
	fi

	# Check for Grunt
	if ! type_exists 'grunt'; then
		e_header "Installing Grunt-CLI..."
		npm install -g grunt-cli
	else
		e_success "Grunt-CLI is installed."
	fi

	# Check for 'z'
	if [ -d "~/.dotfiles/z/z.sh" ] ; then
		e_success "'z' is installed."
	else
		e_header "  Fetching the latest version of 'z'..."
		mkdir -p ~/.dotfiles/z
		curl https://raw.github.com/rupa/z/master/z.sh > ~/.dotfiles/z/z.sh
		chmod +x ~/.dotfiles/z/z.sh
	fi
	echo
}